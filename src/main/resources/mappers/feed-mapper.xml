<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Feed">
	<select id="selectAll" resultType="kh.init.feeds.FeedDTO"
		parameterType="java.util.Map">
		select feed_seq, email, nickname, title, contents, relation, write_date, hashtag
		from (select p.*, row_number()over(order by p.feed_seq) rnum
			from tb_feed p where relation='0'
			                     and 
			                    (p.email not in (select to_id from tb_block where from_id = #{email}) and
			                    p.email not in (select from_id from tb_block where to_id = #{email}))
								<if test="keyword != null">
									and hashtag Like #{keyword}
								</if>
			)
		where rnum between #{startNum} and #{endNum} 
	</select>
 	

	<select id="selectAllRnum" resultType="Integer"
		parameterType="java.util.Map">
		select rnum
		from (select p.*, row_number()over(order by p.feed_seq) rnum
			from tb_feed p where relation='0'
			                     and 
			                    (p.email not in (select to_id from tb_block where from_id = #{email}) and
			                    p.email not in (select from_id from tb_block where to_id = #{email}))
								<if test="keyword != null">
									and hashtag Like #{keyword}
								</if>
		)
	</select>

	<select id="selectAllCount" resultType="Integer" parameterType="java.util.Map">
		select count(*)
		from (select p.*, row_number()over(order by p.feed_seq) rnum
			from tb_feed p where relation='0'
			                     and 
			                    (p.email not in (select to_id from tb_block where from_id = #{email}) and
			                    p.email not in (select from_id from tb_block where to_id = #{email}))
								<if test="keyword != null">
									and hashtag Like #{keyword}
								</if>
		)
	</select>

	<select id="getMyFeed" resultType="kh.init.feeds.FeedDTO"
		parameterType="java.util.Map">
		select feed_seq, email, nickname, title, contents,
		relation, write_date, hashtag
		from (SELECT p.*, ROW_NUMBER()OVER(ORDER
		BY P.FEED_SEQ) as rnum FROM TB_FEED P WHERE email=#{email})
		where rnum
		between #{startNum} and #{endNum}
	</select>

	<select id="getMyFeedRnum" resultType="Integer"
		parameterType="java.util.Map">
		select rnum
		from (SELECT p.*, ROW_NUMBER()OVER(ORDER BY
		P.FEED_SEQ) as rnum FROM TB_FEED P WHERE email=#{email})
		where rnum
		between #{startNum} and #{endNum}
	</select>
	
	<select id="getMyFeedByFriend" resultType="kh.init.feeds.FeedDTO" parameterType="java.util.Map">
		select distinct(feed_seq), email, nickname, title, contents, relation, sysdate, hashtag
		from
    		(select p.*, r.fr_id, r.relation as fr_rel, ROW_NUMBER() OVER(ORDER BY p.feed_seq) rnum 
    		from tb_feed p left join tb_friend r on p.email = r.my_id
   			 where 
	            (r.my_id = #{yourEmail} and r.fr_id = #{myEmail} and
	            r.relation >= p.relation and 
	            p.email not in (select to_id from tb_block where from_id = #{yourEmail}) and 
	            p.email not in (select from_id from tb_block where to_id = #{yourEmail}))
	            
	            and
	            (r.fr_id not in (select to_id from tb_block where from_id = #{myEmail}) and 
	            r.fr_id not in (select from_id from tb_block where to_id = #{myEmail})) )
		where rnum between #{startNum} and #{endNum}

	</select>

	<select id="getMyFeedRnumByFriend" resultType="Integer"
		parameterType="java.util.Map">
		select rnum
		from
    		(select p.*, r.fr_id, r.relation as fr_rel, ROW_NUMBER() OVER(ORDER BY p.feed_seq) rnum 
    		from tb_feed p left join tb_friend r on p.email = r.my_id
   			 where 
	            (r.my_id = #{yourEmail} and r.fr_id = #{myEmail} and
	            r.relation >= p.relation and 
	            p.email not in (select to_id from tb_block where from_id = #{yourEmail}) and 
	            p.email not in (select from_id from tb_block where to_id = #{yourEmail}))
	            
	            and
	            (r.fr_id not in (select to_id from tb_block where from_id = #{myEmail}) and 
	            r.fr_id not in (select from_id from tb_block where to_id = #{myEmail})) )
		where rnum between #{startNum} and #{endNum}
	</select>
	
	
	<select id="getMyFeedCount" resultType="Integer">
		select count(*) from
		tb_feed where email=#{email}
	</select>
	
	<select id="getMyScrapFeed" resultType="kh.init.feeds.FeedDTO"
		parameterType="java.util.Map">
		select feed_seq, email, nickname, title, contents,
		relation, write_date, hashtag
		from (SELECT p.*, ROW_NUMBER()OVER(ORDER
		BY P.FEED_SEQ) as rnum FROM (select * from tb_feed f where
		f.feed_seq in (select s.feed_seq from tb_scrap s where s.email =
		#{email})) p )
		where rnum 
		between #{startNum} and #{endNum}
		
	</select>

	<select id="getMyScrapFeedRnum" resultType="Integer"
		parameterType="java.util.Map">
		select rnum
		from (SELECT p.*, ROW_NUMBER()OVER(ORDER BY
		P.FEED_SEQ) as rnum FROM (select * from tb_feed f where
		f.feed_seq in (select s.feed_seq from tb_scrap s where s.email =
		#{email})) p)
		where rnum
		between #{startNum} and #{endNum}
	</select>

	<select id="scrapFeed" resultType="kh.init.feeds.FeedDTO">
		select * from tb_feed f where
		f.feed_seq in (select s.feed_seq from tb_scrap s where s.email =
		#{email})
	</select>

	<select id="searchFriend" resultType="kh.init.members.MemberDTO" parameterType="java.util.Map">
		select * from tb_member
		where nickname=#{keyword}
			and (p.email not in (select to_id from tb_block where from_id = #{email}) and
			                    p.email not in (select from_id from tb_block where to_id = #{email}))
	</select>

	<select id="getFeedSeq" resultType="integer">
		select feed_seq.nextval from
		dual
	</select>

	<select id="getTitle" resultType="String" parameterType="Integer">
		select title from tb_feed where feed_seq = #{feed_seq}
	</select>

	<insert id="registerFeed" parameterType="kh.init.feeds.FeedDTO">
		insert into tb_feed
		values(#{feed_seq},#{email},#{nickname},#{title},#{contents},#{relation},sysdate,#{hashtag})
	</insert>

	<insert id="registerMedia" parameterType="java.util.Map">
		insert into
		tb_feed_file values(#{feed_seq}, feed_file_seq.nextval,
		#{media})
	</insert>

	<delete id="deleteFeed">
		delete from tb_feed where feed_seq = #{seq}
	</delete>

	<select id="detailView" resultType="kh.init.feeds.FeedDTO">
		select * from tb_feed where
		feed_seq = #{feed_seq}
	</select>

	<select id="getMediaList" resultType="String">
		select media from
		tb_feed_file where feed_seq = #{feed_seq} order by
		feed_file_seq
	</select>

	<!-- for profile_imgList -->
	<select id="getProfile_img" resultType="String">
		select profile_img from
		tb_member where email = #{email}
	</select>

	<select id="getFriendFeedCount" resultType="Integer">
	select  count(distinct(feed_seq))
	from tb_feed p left join tb_friend r on p.email = r.my_id
	where 
        (r.fr_id = #{email} and 
        p.relation >= r.relation and 
        p.email not in (select to_id from tb_block where from_id = #{email}) and 
        p.email not in (select from_id from tb_block where to_id = #{email}))
        
        or p.email = #{email} and
        (r.fr_id not in (select to_id from tb_block where from_id = #{email}) and 
        r.fr_id not in (select from_id from tb_block where to_id = #{email}))
        
	
	
<!-- 		select count(*) from -->
<!-- 		tb_feed p left join tb_friend r on p.email = r.my_id -->
<!-- 		where r.fr_id = -->
<!-- 		#{email} -->
<!-- 		and p.relation >= r.relation -->
<!-- 		or p.email = #{email} -->
	</select>

	<select id="getFriendFeed" parameterType="java.util.Map"
		resultType="kh.init.feeds.FeedDTO">
		select distinct(feed_seq), email, nickname, title, contents, relation, sysdate, hashtag
		from
    		(select p.*, r.fr_id, r.relation as fr_rel, ROW_NUMBER() OVER(ORDER BY p.feed_seq) rnum 
    		from tb_feed p left join tb_friend r on p.email = r.my_id
   			 where 
	            (r.fr_id = #{email} and 
	            p.relation >= r.relation and 
	            p.email not in (select to_id from tb_block where from_id = #{email}) and 
	            p.email not in (select from_id from tb_block where to_id = #{email}))
	            
	            or p.email = #{email} and
	            (r.fr_id not in (select to_id from tb_block where from_id = #{email}) and 
	            r.fr_id not in (select from_id from tb_block where to_id = #{email}))
				order by rnum desc, feed_seq desc)
		where rnum between #{startNum} and #{endNum} 
        order by feed_seq desc

		
<!-- 		select feed_seq, email, nickname, title, contents, -->
<!-- 		relation, write_date, -->
<!-- 		hashtag -->
<!-- 		from (select p.*, ROW_NUMBER() OVER(ORDER -->
<!-- 		BY p.feed_seq) rnum -->
<!-- 		from tb_feed p left join tb_friend r on p.email = -->
<!-- 		r.my_id -->
<!-- 		where r.fr_id = #{email} and p.relation >= r.relation -->
<!-- 		or p.email -->
<!-- 		= #{email}) -->
<!-- 		where rnum between #{startNum} and #{endNum} -->

	</select>

   <!-- 신고 버튼을 위한 쿼리 -->
    <select id="getDeclareFeed" parameterType="String" resultType="Integer">
      select feed_seq from tb_declare where from_id = #{from_id}
   </select>
 
	<!-- 신고게시물의 주인 -->
	<select id="getReportedEmail" resultType="String">
		select email from tb_feed where feed_seq = #{feed_seq}
	</select>

	<update id="modifyFeed" parameterType="kh.init.feeds.FeedDTO">
		update tb_feed set title = #{title}, contents=#{contents} , relation=#{relation} where feed_seq = #{feed_seq}
	</update>

	<!--좋아요 기능 -->
	<select id="getLikeSeq" resultType="integer">
		select like_seq.nextval from
		dual
	</select>

	<insert id="insertLike" parameterType="java.util.Map">
		insert into tb_like values
		(#{like_seq}, #{feed_seq}, #{email})
	</insert>
	<delete id="deleteLike" parameterType="java.util.Map">
		delete from tb_like where
		feed_seq=#{feed_seq} and email=#{email}
	</delete>

	<select id="likeCheck" parameterType="java.util.Map"
		resultType="integer">
		select count(*) from tb_like where feed_seq=#{feed_seq} and
		email=#{email}
	</select>



	<!-- 북마크 -->

	<insert id="insertBookmark" parameterType="java.util.Map">
		insert into tb_scrap
		values (scrap_seq.nextval, #{email}, #{feed_seq})
	</insert>
	<delete id="deleteBookmark" parameterType="java.util.Map">
		delete from tb_scrap
		where feed_seq=#{feed_seq} and email=#{email}
	</delete>

	<select id="bookmarkCheck" parameterType="java.util.Map"
		resultType="integer">
		select count(*) from tb_scrap where feed_seq=#{feed_seq}
		and email=#{email}
	</select>

	<!-- 댓글 기능 -->

	<insert id="registerReply"
		parameterType="kh.init.feeds.ReplyDTO">
		insert into tb_reply
		values(#{feed_seq},#{reply_seq},#{email},#{depth},#{parent},#{contents},sysdate)
	</insert>

	<delete id="deleteReply" parameterType="java.util.Map">
		delete from tb_reply
		where ${col} = #{val} or parent = #{val}
	</delete>

	<select id="viewAllReply" resultType="kh.init.feeds.ReplyDTO">
		select tb_reply.*, tb_member.profile_img, tb_member.nickname from tb_reply ,tb_member where tb_reply.email = tb_member.email and feed_seq = #{feed_seq}
	</select>
	
	<select id="replyNextSeq" resultType="Integer">
		select reply_seq.nextval
		from dual
	</select>
	<update id="updateReply" parameterType="kh.init.feeds.ReplyDTO">
		update tb_reply set
		contents = #{contents} where reply_seq = #{reply_seq}
	</update>
</mapper>