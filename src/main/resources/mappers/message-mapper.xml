<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace ="Message">
	
	<!--  -->
	<select id="insertMsgSeq">
		select msg_seq.nextval from dual
	</select>
	
	<!-- 입력 -->
	<insert id="insertMsg">
		insert into tb_message values(msg_seq.nextval, #{from_id}, #{to_id}, #{contents}, sysdate, 'N')
	</insert>
	
	<!-- 메시지 최근 30개 -->
	<select id="selectThirty" resultType="kh.init.messages.MessageDTO">
	<![CDATA[
		select * from (select * from tb_message order by 1 desc) 
		where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) and rownum <=30 order by 1
	]]>
	</select>
	
	<!-- 메시지 전부 출력 -->
	<select id="selectAll" resultType="kh.init.messages.MessageDTO">
		select * from tb_message where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) order by 1 
	</select>
	
	<!-- 읽음으로 변경 -->
	<update id="readCheck">
		update tb_message set receive_read = 'Y' where from_id=#{to_id} and to_id=#{from_id}
	</update>
	
	<!-- 미리 보기 상대방 출력 -->
	<select id="selectMsgUser" resultType="kh.init.messages.MessageDTO">
<!-- 		select * from tb_message where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) order by 1  -->
		
		select distinct email
		from tb_message msg
		full outer join tb_member mem on mem.email = msg.from_id or mem.email = msg.to_id
		full outer join tb_block bl on (bl.from_id = msg.to_id or bl.from_id = msg.from_id) and (bl.to_id = msg.to_id or bl.to_id = msg.from_id)
		where (msg.to_id ='123123123@naver.com' or msg.from_id='123123123@naver.com') and email!='123123123@naver.com'
		and (bl.from_id is null and bl.to_id is null)
	</select>
	
	<!-- 미리 보기 -->
	<!-- from_id: 보낸 사람 / to_id: 받는 사람 -->	
	<select id="previewMsg" resultType="kh.init.messages.MessageDTO">
		<![CDATA[
			select * from(
			    select
			        msg_seq, from_id, to_id, contents, write_date, receive_read,
			        (select count(*) unread_count from tb_message where (from_id=#{to_id} and to_id=#{from_id}) and receive_read = 'N') unread_count,
			        email, nickname, profile_img
			    from tb_message msg
			    full outer join tb_member mem on mem.email = msg.from_id or mem.email = msg.to_id 
			    where email !=#{from_id} and ((from_id=#{to_id} and to_id=#{from_id}) or (to_id=#{to_id} and from_id=#{from_id}))
			    order by 1 desc
			) where rownum <=1
		]]>
		
<!-- 		select * from ( -->
<!-- 			select  -->
<!-- 			    msg_seq, from_id, to_id, contents, write_date, receive_read, -->
<!-- 			    (select count(*) unread_count from tb_message where (from_id=#{to_id} and to_id=#{from_id}) and receive_read = 'N') unread_count, -->
<!-- 			    nickname, profile_img, email -->
<!-- 			from tb_message msg -->
<!-- 			full outer join tb_friend fr on fr.fr_id = msg.from_id or fr.fr_id = msg.to_id -->
<!-- 			full outer join tb_member mem on mem.email = fr.fr_id -->
<!-- 			where my_id =#{from_id} and fr_id=#{to_id} and contents is not null -->
<!-- 			order by 1 desc ) where rownum <= 1 -->
	</select>
	
	<!-- 읽지 않은 메시지 수 -->
	<select id="unreadCount" resultType="java.lang.Integer"> 
		select count(*) unread_count from tb_message where (from_id=#{to_id} and to_id=#{from_id}) and receive_read = 'N'
	</select>
	
	<!-- 새 메시지가 존재하는지 -->
	<select id="isNewMsg" resultType="java.lang.Integer"> 
		select count(*) from tb_message where to_id=#{from_id} and receive_read='N'
	</select>
	
	<!-- 친구 목록 --><!-- return : fr_id, nickname -->
	<select id="friendList" resultType="kh.init.messages.MessageDTO">
		select 
			f.my_id my_id, f.fr_id fr_id, m.nickname nickname, m.profile_img
		from tb_friend f 
		full outer join tb_member m on f.fr_id = m.email
		where f.my_id = #{my_id}
			and f.fr_id not in (select b.to_id from tb_block b where b.from_id = #{my_id})
	</select>
	
	<!-- 검색 -->
	<select id="searchUser" resultType="kh.init.friends.FriendDTO">
		select * from tb_friend where my_id=#{my_id} and to_id like '%'||#{fr_id}'%'
	</select>

</mapper>