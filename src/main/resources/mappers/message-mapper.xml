<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace ="Message">
	
	<!--  -->
	<select id="insertMsgSeq">
		select msg_seq.nextval from dual
	</select>
	
	<insert id="insertMsg"> <!-- 입력 -->
		insert into tb_message values(msg_seq.nextval, #{from_id}, #{to_id}, #{contents}, sysdate, 'N')
	</insert>
	
	<select id="selectThirty" resultType="kh.init.messages.MessageDTO"> <!-- 메시지 최근 30개 -->
	<![CDATA[
		select * from (select * from tb_message order by 1 desc) where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) and rownum <=30 order by 1
	]]>
	</select>
	
	<select id="selectAll" resultType="kh.init.messages.MessageDTO"> <!-- 메시지 전부 출력 -->
		select * from tb_message where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) order by 1 
	</select>
	
	<update id="readCheck"> <!-- 읽음 표시 -->
		update tb_message set receive_read = 'Y' where from_id=#{to_id} and to_id=#{from_id}
	</update>
	
	<select id="previewMsg" resultType="kh.init.messages.MessageDTO"> <!-- 미리 보기 -->
		select * from (select * from tb_message order by 1 desc) where ((from_id=#{from_id} and to_id=#{to_id}) or (from_id=#{to_id} and to_id=#{from_id})) and rownum=1;
	</select>
	
	<select id="unreadCount" resultType="java.lang.Integer"> <!-- 읽지 않은 메시지 수 -->
		select count(*) from tb_message where (from_id=#{to_id} and to_id=#{from_id}) and receive_read = 'N'
	</select>
	
	<select id="friendList" resultType="kh.init.friends.FriendDTO"> <!-- 친구 목록 -->
		select * from tb_friend where my_id=#{my_id}
	</select>
	
	<select id="searchUser" resultType="kh.init.friends.FriendDTO"> <!-- 검색 -->
		select * from tb_friend where my_id=#{my_id} and to_id like '%'||#{fr_id}'%'
	</select>
	
	<select id="friendListConvert" resultType="kh.init.members.MemberDTO"> <!-- 친구 닉네임으로 반환 -->
		select nickname from tb_member where email=#{email}
	</select>

</mapper>